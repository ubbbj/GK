<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
    <title>CPSC 424, Lab 2, Exercise 1</title>
    <style>
        /* This style section is here to make the canvas more obvious on the
       page.  It is white on a light gray page background, with a thin
       black border. */
        
        body {
            background-color: #DDDDDD;
        }
        
        canvas {
            background-color: white;
            display: block;
        }
        
        #canvasholder {
            border: 2px solid black;
            float: left;
            /* This makes the border exactly fit the canvas. */
        }
    </style>
    <script>
        "use strict"; // gives improved error-checking in scripts.

        var canvas; // The canvas element on which we will draw.
        var graphics; // A 2D graphics context for drawing on the canvas.
        var pixelSize; // The size of a pixel in the coordinate system; set up by
        //    applyWindowToViewportTransform function when it is called.

        /**
         *  The draw() function is called by init() after the page loads,
         *  to draw the content of the canvas.  At the start, clear the canvas
         *  and save a copy of the state; restore the state at the end.  (These
         *  actions are not necessary in this program, since the function will
         *  only be called once.)
         */
         function draw() {
        //head
        graphics.beginPath();
        graphics.arc(300, 300, 200, 0, 360);
        graphics.fillStyle = "red";
        graphics.strokeStyle = "black";
        graphics.lineWidth = 8;
        graphics.stroke();
        graphics.fill();

        //eyes
        graphics.beginPath();
        graphics.fillStyle = "white";
        graphics.fillCircle(220, 230, 40);
        graphics.fillCircle(380, 230, 40);

        graphics.beginPath();
        graphics.fillStyle = "black";
        graphics.fillCircle(220, 230, 25);
        graphics.fillCircle(380, 230, 25);

        graphics.beginPath();
        graphics.fillStyle = "white";
        graphics.fillCircle(210, 225, 10);
        graphics.fillCircle(370, 225, 10);

        //mouth
        graphics.beginPath();
        graphics.fillStyle = "black";
        graphics.moveTo(200, 370);
        graphics.bezierCurveTo(260, 480, 360, 480, 420, 370);
        graphics.bezierCurveTo(360, 420, 260, 420, 200, 370);
        graphics.fill();

        graphics.beginPath();
        graphics.arc(185, 355, 27, -0.1 * Math.PI, 0.55 * Math.PI);
        graphics.stroke();

        graphics.beginPath();
        graphics.arc(440, 360, 27, 0.5 * Math.PI, 1.1 * Math.PI);
        graphics.stroke();

        //teeth
        graphics.beginPath();
        graphics.fillStyle = "white";
        graphics.rect(290, 410, 25, 25);
        graphics.rect(310, 410, 25, 25);
        graphics.fill();
        graphics.lineWidth = 2;
        graphics.strokeLine(312.5, 410, 312.5, 435);
      }

        /**
         * Sets up a transformation in the graphics context so that the canvas will
         * show x-values in the range from left to right, and y-values in the range
         * from bottom to top.  If preserveAspect is true, then one of the ranges
         * will be increased, if necessary, to account for the aspect ratio of the
         * canvas.  This function sets the global variable pixelsize to be the
         * size of a pixel in the new coordinate system.  (If preseverAspect is
         * true, pixelSize is the maximum of its horizontal and vertical sizes.)
         */
        function applyWindowToViewportTransformation(left, right, bottom, top, preserveAspect) {
            var displayAspect, windowAspect;
            var excess;
            var pixelwidth, pixelheight;
            if (preserveAspect) {
                // Adjust the limits to match the aspect ratio of the drawing area.
                displayAspect = Math.abs(canvas.height / canvas.width);
                windowAspect = Math.abs((top - bottom) / (right - left));
                if (displayAspect > windowAspect) {
                    // Expand the viewport vertically.
                    excess = (top - bottom) * (displayAspect / windowAspect - 1);
                    top = top + excess / 2;
                    bottom = bottom - excess / 2;
                } else if (displayAspect < windowAspect) {
                    // Expand the viewport vertically.
                    excess = (right - left) * (windowAspect / displayAspect - 1);
                    right = right + excess / 2;
                    left = left - excess / 2;
                }
            }
            graphics.scale(canvas.width / (right - left), canvas.height / (bottom - top));
            graphics.translate(-left, -top);
            pixelwidth = Math.abs((right - left) / canvas.width);
            pixelheight = Math.abs((bottom - top) / canvas.height);
            pixelSize = Math.max(pixelwidth, pixelheight);
        } // end of applyWindowToViewportTransformation()


        function addGraphicsContextExtras(graphics) {
            graphics.strokeLine = function(x1, y1, x2, y2) {
                this.beginPath();
                this.moveTo(x1, y1);
                this.lineTo(x2, y2);
                this.stroke();
            }
            graphics.fillCircle = function(x, y, r) {
                this.beginPath();
                this.arc(x, y, r, 0, 2 * Math.PI, false);
                this.fill();
            }
            graphics.strokeCircle = function(x, y, radius) {
                this.beginPath();
                this.arc(x, y, radius, 0, 2 * Math.PI, false);
                this.stroke();
            }
            graphics.fillPoly = function() {
                if (arguments.length < 6)
                    return;
                this.beginPath();
                this.moveTo(arguments[0], arguments[1]);
                for (var i = 2; i + 1 < arguments.length; i = i + 2) {
                    this.lineTo(arguments[i], arguments[i + 1]);
                }
                this.closePath();
                this.fill();
            }
            graphics.strokePoly = function() {
                if (arguments.length < 4)
                    return;
                this.beginPath();
                this.moveTo(arguments[0], arguments[1]);
                for (var i = 2; i + 1 < arguments.length; i = i + 2) {
                    this.lineTo(arguments[i], arguments[i + 1]);
                }
                this.closePath();
                this.stroke();
            }
            graphics.fillOval = function(x, y, horizontalRadius, verticalRadius) {
                this.save();
                this.translate(x, y);
                this.scale(horizontalRadius, verticalRadius);
                this.beginPath();
                this.arc(0, 0, 1, 0, 2 * Math.PI, false);
                this.restore();
                this.fill();
            }
            graphics.strokeOval = function(x, y, horizontalRadius, verticalRadius) {
                this.save();
                this.translate(x, y);
                this.scale(horizontalRadius, verticalRadius);
                this.beginPath();
                this.arc(0, 0, 1, 0, 2 * Math.PI, false);
                this.restore();
                this.stroke();
            }
            graphics.getRGB = function(x, y) {
                var color = this.getImageData(x, y, 1, 1);
                return color.data;
            }
        } // end of addGraphicsContextExtras()

        /**
         * The init() funciton is called after the page has been
         * loaded.  It initializes the canvas and graphics variables.
         * It calles addGraphicsContextExtras(graphics) to add the extra
         * drawing functions to the graphics context, and it calls draw()
         * to draw on the canvas.
         */
        function init() {
            try {
                canvas = document.getElementById("canvas");
                graphics = canvas.getContext("2d");
            } catch (e) {
                document.getElementById("canvasholder").innerHTML =
                    "Canvas graphics is not supported.<br>" +
                    "An error occurred while initializing graphics.";
            }
            addGraphicsContextExtras(graphics);
            draw(); // Call draw() to draw on the canvas.
        }
    </script>
    <link href="data:text/css,%3Ais(%5Bid*%3D'google_ads_iframe'%5D%2C%5Bid*%3D'taboola-'%5D%2C.taboolaHeight%2C.taboola-placeholder%2C%23credential_picker_container%2C%23credentials-picker-container%2C%23credential_picker_iframe%2C%5Bid*%3D'google-one-tap-iframe'%5D%2C%23google-one-tap-popup-container%2C.google-one-tap-modal-div%2C%23amp_floatingAdDiv%2C%23ez-content-blocker-container)%20%7Bdisplay%3Anone!important%3Bmin-height%3A0!important%3Bheight%3A0!important%3B%7D"
        rel="stylesheet" type="text/css">
</head>

<body onload="init()">
    <!-- the onload attribute here is what calls the init() function -->

    <h2>CS 424, Lab 2, Exercise 1</h2>

    <noscript>
        <!-- This message will be shown in the page if JavaScript is not available. -->
        <p>JavaScript is required to use this page.</p>
    </noscript>

    <div id="canvasholder">
        <canvas id="canvas" width="600" height="600">
            <!-- This message is shown on the page if the browser doesn't support the canvas element. -->
            Canvas not supported.
        </canvas>
    </div>



    <script>
        mendeleyWebImporter = {
            downloadPdfs(e, t) {
                return this._call('downloadPdfs', [e, t]);
            },
            open() {
                return this._call('open', []);
            },
            setLoginToken(e) {
                return this._call('setLoginToken', [e]);
            },
            _call(methodName, methodArgs) {
                const id = Math.random();
                window.postMessage({
                    id,
                    token: '0.7410837702584282',
                    methodName,
                    methodArgs
                }, 'https://e-uczelnia.ath.bielsko.pl');
                return new Promise(resolve => {
                    const listener = window.addEventListener('message', event => {
                        const data = event.data;
                        if (typeof data !== 'object' || !('result' in data) || data.id !== id) return;
                        window.removeEventListener('message', listener);
                        resolve(data.result);
                    });
                });
            }
        };
    </script>
</body>

</html>